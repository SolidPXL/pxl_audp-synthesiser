#include "generators.h"


void sine_generator(void* config){
	struct sine_generator_config parsed_config = *((struct sine_generator_config*)(config));
	static OscState phasebuffer = { 0.0f,0.0f};

	//Set the right increment
	phasebuffer.phase_inc = parsed_config.freq/SAMPLE_RATE_HZ;

	for (i = 0; i < MAINBUFFER_SIZE; i++) {
	  out[i] = sinf(2*M_PI * state->phase) * parsed_config.amp;
	  phasebuffer->phase += phasebuffer->phase_inc;
	  if (phasebuffer->phase >= 1.0f) phasebuffer->phase -= 1.0f;
	  g_sample_index++;
	}

}


//typedef struct {
//    float phase;
//    float freq;
//    float sample_rate;
//} SineOscillator;
//
//void generate_sine(SineOscillator* osc, int32_t* buffer, size_t length) {
//    for (size_t i = 0; i < length; ++i) {
//        buffer[i] += (int32_t)(sinf(2.0f * M_PI * osc->phase) * 32767.0f); // or whatever your amplitude scaling is
//        osc->phase += osc->freq / osc->sample_rate;
//        if (osc->phase >= 1.0f) osc->phase -= 1.0f;
//    }
//}
