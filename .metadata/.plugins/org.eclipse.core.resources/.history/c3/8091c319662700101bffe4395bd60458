/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "oscilators/generators.h"


#define MAINBUFFER_SIZE 2048
#define BUFFER_TIME_MS 500//One full buffer corresponds to how many milliseconds
#define SAMPLE_INTERVAL_US (BUFFER_TIME_MS*1000)/MAINBUFFER_SIZE//Calculated value based on size and time

struct generic_pipeline_node{
	void* config;
	void (*fnptr)(void*);
};

//Globals
uint32_t g_sample_index = 0;
int32_t g_sound_buffer[MAINBUFFER_SIZE];



int main()
{
    init_platform();
    print("Synthesiser\n\r");

    //Configure nodes, for each node create a generic_pipeline_node
    struct sine_generator_config osc1_config = {
    	.pitch = 0
    };
    struct generic_pipeline_node osc1_node = {
    		.config = (void*)(&osc1_config),
			.fnptr = sine_generator
    };



    //Synth pipeline
    int pipeline_size = 1;
    struct generic_pipeline_node pipeline[] = {  //Register the nodes here
    		osc1_node
    };

    while(1){

    	//Get input


    	//Process pipeline
    	for(int i=0;i<pipeline_size;i++){
    		pipeline[i].fnptr(pipeline[i].config);
    	}

    	//Output result


    }
    cleanup_platform();
    return 0;

}
