/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "oscilators/generators.h"
#include "globals.h"
#include "synth_lib.h"
#include "audio.h"
#include "effects/sound_effects.h"
#include "sleep.h"

uint32_t g_sample_index = 0;
int32_t g_sound_buffer[MAINBUFFER_SIZE] = {0};
uint8_t g_keys_pressed[7]; //Allow a maximum of 7 notes to be played simultaneously

int32_t convert(uint32_t val) {
    return (int32_t)(val ^ 0x80000000); // flips the MSB
}


int main()
{
    init_platform();
	//Configure the IIC data structure
	IicConfig(XPAR_XIICPS_0_DEVICE_ID);

	//Configure the Audio Codec's PLL
	AudioPllConfig();

	//Configure the Line in and Line out ports.
	//Call LineInLineOutConfig() for a configuration that
	//enables the HP jack too.
	AudioConfigureJacks();
	LineinLineoutConfig();

    print("Synthesiser\n\r");
    xil_printf("MAINBUFFER_SIZE: %d\n",MAINBUFFER_SIZE);
    xil_printf("BUFFER_TIME_MS: %d\n",BUFFER_TIME_MS);
    xil_printf("SAMPLE_INTERVAL_US: %d\n",SAMPLE_INTERVAL_US);
    xil_printf("SAMPLE_RATE_HZ: %d\n",SAMPLE_RATE_HZ);

    //Configure nodes, for each node create a generic_pipeline_node
    struct sine_generator_config osc1_config = {
    	.freq = note_to_freq_lut(A2),
		.amp = 5000000
    };
    struct generic_pipeline_node osc1_node = {
    		.config = (void*)(&osc1_config),
			.fnptr = sine_generator
    };

    // Distortion effect node
    struct distortion_config dist_config = {
            .gain      = 5.0f,
            .threshold = 0.3f
    };
    struct generic_pipeline_node distortion_node = {
            .config = (void*)&dist_config,
            .fnptr  = distortion
    };

    // 3) Delay effect node
    struct delay_config delay_config = {
        .delay_samples = SAMPLE_RATE_HZ / 4,  // 250 ms delay
        .feedback      = 0.5f
    };
    struct generic_pipeline_node delay_node = {
        .config = (void*)&delay_config,
        .fnptr  = delay_effect
    };

    // 4) Low-pass filter node
        struct lowpass_config lp_config = {
            .alpha = 0.1f,
            .prev  = 0.0f
        };
        struct generic_pipeline_node lowpass_node = {
            .config = (void*)&lp_config,
            .fnptr  = lowpass
        };


    //Synth pipeline
    int pipeline_size = 4;
    struct generic_pipeline_node pipeline[] = {  //Register the nodes here
    		osc1_node,
			distortion_node,
			delay_node,
			lowpass_node
    };

    while(1){

    	//Get input


    	//Process pipeline
    	for(int i=0;i<pipeline_size;i++){
    		pipeline[i].fnptr(pipeline[i].config);
    	}

    	//Output result
    	for(int i=0;i<MAINBUFFER_SIZE;i++){
    		int32_t output = convert(g_sound_buffer[i]);
    		Xil_Out32(I2S_DATA_TX_L_REG, output);
    		Xil_Out32(I2S_DATA_TX_R_REG, output);
    		usleep_A9(SAMPLE_INTERVAL_US);
    	}

//    	uint32_t data = Xil_In32(I2S_DATA_RX_L_REG);
//    	xil_printf("%d\n",data);


    }
    cleanup_platform();
    return 0;

}
